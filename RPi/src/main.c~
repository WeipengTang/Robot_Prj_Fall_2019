/*
 * udpserver.c
 *
 * This example shows how to code up a UDP (connectionless)
 * server. Note that we no longer have a listening queue or
 * perform an accept. This is because UDP does not support 
 * the concept of reliable connections - UDP simply provides a
 * lightweight means of sending messages from one system to 
 * another. You, as a programmer, must figure out what to do
 * in case a message is dropped, lost, or delayed!
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <sys/uio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <ctype.h>
#include <unistd.h>
#include <sys/wait.h>
#include "serial.h"
#include "utilities.h"
#include "camera.h"

#define MAXINPUTLEN 1024
static int tcp = 0;
char input[MAXINPUTLEN] = "";
char output[MAXINPUTLEN] = "";
char feedback[MAXINPUTLEN] = "";
void send_image(void);

void SigCatcher(int n){
	wait3(NULL, WNOHANG, NULL);
	signal(SIGCHLD, SigCatcher);
}

int main(int argc, char *argv[])
{
	int udpSocket = 0;
	int client_sockfd;
	int udpPort = 0;
	int status = 0;
	int size = 0;
	int32_t image_size = 0;				//contains the size of the image
	unsigned int clientLength = 0;
	struct sockaddr_in serverMachine = { 0 };
	struct sockaddr_in clientMachine = { 0 };

	UARTInit();

	// ensure we have correct arguments

	if (argc < 2) {
		udpPort = 6000;
	}else
		udpPort = atoi(argv[1]);

	// allocate a socket
	if(tcp == 1)
		udpSocket = socket(AF_INET, SOCK_STREAM, 0);
	else
		udpSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
	if (udpSocket < 0) {
		printf ("Error: can't get socket!\n");
		return 2;
	}	/* endif */

	// zero out socket structures and fill
	// in with details for our UDP server

	memset (&serverMachine, 0, sizeof (serverMachine));
	memset (&clientMachine, 0, sizeof (clientMachine));

	serverMachine.sin_family = AF_INET;
	serverMachine.sin_addr.s_addr = htonl (INADDR_ANY);
	serverMachine.sin_port = htons (udpPort);

	// bind the socket structure to the socket
	// to establish our server

	status = bind (udpSocket, (struct sockaddr *)&serverMachine, 
			sizeof (serverMachine));
	if (status < 0) {
		printf ("Error: can't bind\n");
		return -1;
	}	/* endif */

	if(tcp == 1){
		if (listen (udpSocket, 5) < 0) {
			printf ("grrr, can't listen on socket\n");
			close (udpSocket);
			return -1;
		}

		clientLength = sizeof(clientMachine);
		client_sockfd = accept(udpSocket, (struct sockaddr *)&clientMachine, 
				                   &clientLength);
		if(client_sockfd<0){
			printf("can't accept from client.\n");
			return -1;
		}
	}
	while (1) {
		

		memset(input, 0, MAXINPUTLEN);
		if(tcp == 1){
			size = read(client_sockfd, input, MAXINPUTLEN);
		}else{
			size = recvfrom (udpSocket, input, MAXINPUTLEN, 0, 
							(struct sockaddr *) &clientMachine, &clientLength);
		}
		if (size < 0) {
			printf ("Error: recvfrom failure\n");
			return 4;
		}
		printf ("Client IP: %s\n", inet_ntoa(clientMachine.sin_addr));
		printf ("Client Port: %u\n", clientMachine.sin_port);
		printf ("ClientLength: %d size: %d Message received: %s\n", clientLength, size, input);

		//process regular robot commands
		UARTSend (input, size);

		//get image file size
		image_size = get_file_size();
		memset(output, 0, MAXINPUTLEN);
		sprintf(output, "$%d", image_size); //convert to a string

		msleep(30);

		//receive feedback from robot
		memset(feedback, 0, MAXINPUTLEN);
		UARTReceive (feedback, MAXINPUTLEN);

		//cascade the feedback to the output
		strncat(output, feedback, strlen(feedback)+1);
		printf("Sent: %s\n", output);
		size = strlen(output)+1;
		//if size is small than 20, the message is incorrect
		if(size > 20){
			if(tcp==1){
				status = write(client_sockfd, output, size);
			}
			else{
				clientLength = sizeof (clientMachine);
				status = sendto (udpSocket, output, size, 0, 
								(struct sockaddr *) &clientMachine, clientLength);
			}
			if (status < 0) {
				printf ("Error: sendto error\n");
				return 5;
			}	/* endif */
			printf("Send size: %d\n", status);
		}

		
	}	/* end while loop */

	/* as a server, this should never be reached */

	return 0;
}


